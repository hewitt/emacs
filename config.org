#+TITLE: EmacsConfig
#+AUTHOR: Rich Hewitt
#+EMAIL: richard.hewitt@manchester.ac.uk
#+STARTUP: indent
#+PROPERTY: header-args :results silent

To convert this to "./config.el" do M-x org-babel-tangle.

Note: originally packages were installed by use-packages :ensure t
mechanism. As of 2022 this is replaced in favour of a NixOS
home-manager configuration that manages most (but not all) of the
packages.
 
* Basic setup
** Package archives: ELPA/MELPA
Standard content to configure ELPA and MELPA for packages.

Custom settings points to ~/.emacs.d/custom-settings.el but this is
not controlled by "home-manager" in my NixOS configuration so these
custom settings should be treated as both transient and machine
specific.


#+BEGIN_SRC emacs-lisp :tangle yes
  ;;;;
  ;;;; CONFIGURE MELPA AND GNU ARCHIVES
  ;;;;
  (require 'package)
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities ; prefer ELPA to MELPA
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5 )))
  (package-initialize)

  ;;;;
  ;;;; CONFIGURE USE-PACKAGE TO AUTOLOAD THINGS : https://github.com/jwiegley/use-package
  ;;;;
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package) )

  ;; this is the standard use-package invocation if it is in ~/.emacs.d
  (eval-when-compile
    (require 'use-package) )

  ;; Keep custom settings in a separate file to not pollute this one
  (setq custom-file "/home/hewitt/.emacs.d/custom-settings.el")
  (load custom-file t)

  ;; quelpa set up to allow 'age to be used below
  ;; currently not required as everything is in (M)ELPA [Jan 2023]
  ;; (quelpa
  ;;  '(quelpa-use-package
  ;;    :fetcher git
  ;;    :url "https://github.com/quelpa/quelpa-use-package.git"))
  ;; (require 'quelpa-use-package)
#+END_SRC

** Change some of the default emacs variables
Some random minor tweaks. Turn off scroll bar, tool bar, menu bar.
Move all backups to a single folder. Minor tweaks to garbage
collection.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; move backups to stop *~ proliferation
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  ;; have mouse input in the terminal
  ;; the disadvantage is you need to SHIFT+middle mouse to paste in the terminal
  (xterm-mouse-mode 1)
  ;; Turn off the menu/scroll/toolbar
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;; this stops the cursor recentering on leaving the page
  ;; ie. stop scrolling by 0.5 page
  (setq scroll-conservatively 101 )
  ;; replace annoying yes/no with y/n
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; don't end sentences with a double space
  (setq sentence-end-double-space nil)
  ;; the frequency of garbage collection
  (setq gc-cons-threshold 8000000 ) ; i.e., every ~8MB
  ;; report GC events
  (setq garbage-collection-messages t)
  ;; warn when opening files bigger than 80MB
  (setq large-file-warning-threshold 80000000)
  ;; always follow the symlink
  (setq vc-follow-symlinks t)
  #+END_SRC

** Update buffer contents when file changes on "disk"
When editing the same file on a shared drive/remote machine, make sure
that we update any open buffers to show the on-file current status.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
  ;; This COMMAND will reload a buffer if it changes on disk, which is
  ;; key if editing from multiple machines over long periods.
  ;(defun revert-buffer-no-confirm ()
  ;  "Revert buffer without confirmation."
  ;  (interactive)
  ;  (revert-buffer :ignore-auto :noconfirm))
  (global-auto-revert-mode)
#+END_SRC

** Add custom file extensions to set major modes
I use "m4" to update headers/footers/dates in LaTeX files for leccture
course material. So here we default to latex-mode for .m4 extensions.
In addition ".gnu" for Gnuplot and ".m" for Octave.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; setup files ending in “.m4” to open in LaTeX-mode
  ;; for use in lecture note construction
  (add-to-list 'auto-mode-alist '("\\.m4\\'" . latex-mode))
  ;; my default gnuplot extension
  (add-to-list 'auto-mode-alist '("\\.gnu\\'" . gnuplot-mode))
  ;; Octave/Matlab
  (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
  ;; Nix language
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+END_SRC


* Appearance
  
** Delight
Delight declutters the modeline by reducing the amount of mode
information.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package delight
    ;;ensure t
    :init (message "Use-package: Delight") )
  ;; delight some basic modes to get rid of modeline content
  (delight 'eldoc-mode "" 'eldoc)
  (delight 'abbrev-mode "" 'abbrev)
#+END_SRC

** Dashboard
Dashboard is the startup screen for quick access to previously used
material.

*Ongoing issue* [May 2022] Dashboard is currently turned off because
it causes issues with "emacs --daemon" on NixOS. See:
https://github.com/emacs-dashboard/emacs-dashboard/issues/373

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; dashboard runs at startup by default
  (use-package dashboard
    ;;ensure t
    :delight "Dash"
    :init
    (message "Use-package: Dashboard")
    :config
    (setq dashboard-banner-logo-title "Go!")
    (setq dashboard-startup-banner '2) ; 1,2,3 are the text banners
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (agenda . 4)))
    (dashboard-setup-startup-hook)
    ;(dashboard-refresh-buffer)
    )
  ;; show dashboard on startup for emacsclients when running the daemon
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) 
#+END_SRC

** Prot's themes 
I've switched to the more systematic themes from Protesilaos Stavrou,
and most recently his ef-themes.

Fonts: The defailt font is now set via custom-settings.el since it is machine
specific given each has its own DPI settings.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; My typical font on hi-dpi displays
  ;;(set-face-attribute 'default nil
  ;;                    :family "Iosevka Term SS05" :height 110 :weight 'regular :width 'regular )
  ;;(set-face-attribute 'variable-pitch nil
  ;;                    :family "Iosevka" :height 1.0 :weight 'regular)
  ;;(set-face-attribute 'fixed-pitch nil
  ;;                    :family "Iosevka Term SS05" :height 1.0 :weight 'regular :width 'regular )
  ;; for non-hi-dpi displays, below is now set via custom-settings.el
  ;;(set-face-attribute 'default nil
  ;;                     :family "Terminus" :height 120 :weight 'medium :width 'normal )
  ;;(set-face-attribute 'fixed-pitch nil
  ;;                     :family "Terminus" :height 120 :weight 'medium :width 'normal )
  (setq-default line-spacing 0.2) 
  (use-package modus-themes
    ;;ensure t
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-mixed-fonts nil
          modus-themes-subtle-line-numbers nil
          modus-themes-intense-mouseovers nil
          modus-themes-deuteranopia nil
          modus-themes-tabs-accented t
          modus-themes-variable-pitch-ui nil
          modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related
          modus-themes-fringes 'intense ; {nil,'subtle,'intense}

          ;; Options for `modus-themes-lang-checkers' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `straight-underline', `text-also', `background',
          ;; `intense' OR `faint'.          
          modus-themes-lang-checkers nil

          ;; Options for `modus-themes-mode-line' are either nil, or a list
          ;; that can combine any of `3d' OR `moody', `borderless',
          ;; `accented', a natural number for extra padding (or a cons cell
          ;; of padding and NATNUM), and a floating point for the height of
          ;; the text relative to the base font size (or a cons cell of
          ;; height and FLOAT)
          modus-themes-mode-line '(accented borderless (padding . 2) (height . 1.0))

          ;; Same as above
          ;; modus-themes-mode-line '(accented borderless 4 0.9)

          ;; Options for `modus-themes-markup' are either nil, or a list
          ;; that can combine any of `bold', `italic', `background',
          ;; `intense'.
          modus-themes-markup '(background italic)

          ;; Options for `modus-themes-syntax' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
          modus-themes-syntax '(yellow-comments green-strings alt-syntax)

          ;; Options for `modus-themes-hl-line' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `accented', `underline', `intense'
          modus-themes-hl-line '(intense accented)

          ;; Options for `modus-themes-paren-match' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `bold', `intense', `underline'
          modus-themes-paren-match '(bold intense)

          ;; Options for `modus-themes-links' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
          ;; `bold', `italic', `background'
          modus-themes-links '(neutral-underline background)

          ;; Options for `modus-themes-box-buttons' are either nil (the
          ;; default), or a list that can combine any of `flat', `accented',
          ;; `faint', `variable-pitch', `underline', `all-buttons', the
          ;; symbol of any font weight as listed in `modus-themes-weights',
          ;; and a floating point number (e.g. 0.9) for the height of the
          ;; button's text.
          modus-themes-box-buttons '(variable-pitch flat faint 0.9)

          ;; Options for `modus-themes-prompts' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `background', `bold', `gray', `intense', `italic'
          modus-themes-prompts '(intense bold)

          ;; The `modus-themes-completions' is an alist that reads three
          ;; keys: `matches', `selection', `popup'.  Each accepts a nil
          ;; value (or empty list) or a list of properties that can include
          ;; any of the following (for WEIGHT read further below)
          ;;
          ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
          ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
          ;; `popup' - same as `selected'
          ;; `t' - applies to any key not explicitly referenced (check docs)
          ;;
          ;; WEIGHT is a symbol such as `semibold', `light', or anything
          ;; covered in `modus-themes-weights'.  Bold is used in the absence
          ;; of an explicit WEIGHT.
          modus-themes-completions '((matches . (extrabold))
                                     (selection . (semibold accented))
                                     (popup . (accented intense)))

          modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

          ;; Options for `modus-themes-region' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `no-extend', `bg-only', `accented'
          modus-themes-region '(bg-only no-extend)

          ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
          modus-themes-diffs 'desaturated

          modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}
          )

    ;; Load the theme files before enabling a theme
    ;;(modus-themes-load-themes)
    :config
    ;; allow for color changes 
    ;; so far I've only lifted bg-main up slightly
    (setq modus-themes-vivendi-color-overrides ; dark
          '((bg-main . "#282828") ; I've lifted this bg to match foot.ini, breaking contrast levels
            (bg-hl-line . "#484848")
            ))
    ;;(setq modus-themes-operandi-color-overrides ; light
    ;;      '((bg-main . "#fbf3db") ; lowered contrast of fg vs bg
    ;;        (fg-main . "#53676d")))

    ;;Load the theme of your choice:
    ;; (modus-themes-load-vivendi) ;; OR (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
  #+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Disable all other themes to avoid awkward blending:    
  (use-package ef-themes
    :init
    (mapc #'disable-theme custom-enabled-themes)
    ;; Make customisations that affect Emacs faces BEFORE loading a theme
    ;; (any change needs a theme re-load to take effect).
    (setq ef-themes-to-toggle '(ef-day ef-winter))
    ;;:config
    ;; Load the theme of choice:
    ;;(load-theme 'ef-summer :no-confirm)
    ;; Light: `ef-day', `ef-light', `ef-spring', `ef-summer'.
    ;; Dark:  `ef-autumn', `ef-dark', `ef-night', `ef-winter'.

    ;; I set the theme at the end of this configuration because of
    ;; some minor issues with code comments showing as underlined [2022]
    )
#+END_SRC
  
** Modeline (doom)
Doom modeline is my default choice, just to add a bit of usability to
the standard mode line.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  ;;ensure t
  :init (message "Use-package: Doom-modeline")
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Whether display icons or not (if nil nothing will be showed).
  (setq doom-modeline-icon t)
  ;; Display the icon for the major mode. 
  (setq doom-modeline-major-mode-icon t )
  ;; Display color icons for `major-mode' 
  (setq doom-modeline-major-mode-color-icon t)
  ;; Display minor modes or not?
  (setq doom-modeline-minor-modes t)
  ;; Whether display icons for buffer states.
  (setq doom-modeline-buffer-state-icon t)
  ;; Whether display buffer modification icon.
  (setq doom-modeline-buffer-modification-icon t)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)
  ;; If non-nil, only display one number for checker information if applicable.
  ; (setq doom-modeline-checker-simple-format t)
  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 6)
  ;; Whether display perspective name or not. Non-nil to display in mode-line.
  ;(setq doom-modeline-persp-name t)
  ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)  )
#+END_SRC

** Rainbow-delimiters
Colorised brackets to make matching easier.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    ;;ensure t
    :init
    (message "Use-package: Rainbow delimiters")
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'latex-mode-hook 'rainbow-delimiters-mode) )
#+END_SRC

** Which-key
Popup a description of key combinations after a delay.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    ;;ensure t
    :delight 
    :init 
    (message "Use-package: Which-key mode")
    :config
    (setq which-key-idle-delay 0.25)
    (which-key-mode) )
#+END_SRC

** Appearance hooks for modes

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; latex  
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'hl-line-mode)
  ;; programming
  (add-hook 'prog-mode-hook 'hl-line-mode)
  ;; org-mode
  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC


* Narrowing and completion
** Overview
A useful overview from: https://www.reddit.com/r/emacs/comments/k3c0u7/consult_counselswiper_alternative_for/

The minibuffer completion uses:

+ "completing-read" to define what the completion UI looks like and
  how it behaves.

+ "completing-styles" to define how completion filter/sorts results
  (e.g. does typing "fi fil" match "find-file").

In terms of packages:

+ "icomplete", "fido" and "Selectrum" all just set the
  "completing-read" function and implement continuous completion on
  each key press (not technically true for "icomplete" for close
  enough).

+ "Orderless", "Prescient", and the built-in "flex" are
  completion-styles to allow convenient filters like regex, and
  sorting by frequency/recency.

+ "icomplete-vertical" is a minor mode to make "icomplete" vertical.

+ "Consult" is a set of functions to use various Emacs facilities via
  completing-read.

+ "Embark" is a minor mode to allow each minibuffer entry to have
  multiple actions.

All of the above try to use the minibuffer's existing hooks and
extension mechanisms, and benefit from large parts of the rest of
Emacs using those mechanisms too. Consequently, they all interoperate
with each other and other parts of the Emacs ecosystem. You can pick
which you want.

Modes that don't attempt to interoperate (and I avoid):

+ "Ido" performs the same role as "completing-read", but doesn't set
  "completing-read" and so only works for functions that use Ido's own
  completing function. "ido-ubiquitious" sets ido to be
  completing-read. ido appears to be considered somewhat deprecated on
  emacs-devel, in favour of icomplete.

+ "Ivy" doesn't use completing-read at all, and does its own filtering
  (rather than use completion-styles).

+ "Swiper" uses Ivy. I replace with just `C-s`.

+ "Counsel" is a set of functions to use various parts of Emacs via
  minibuffer completion. Very convenient, but only works if you also
  have "Ivy/Swiper". "Consult" is like "Counsel" but uses the built-in
  minibuffer completion.

+ "Helm" doesn't use "completing-read", but does add multiple actions
  on each selection. I would use "embark" if I wanted this
  functionality, but I don't.


** Implementation 1 : everything done using standard completing-read interface
- Use Vertico (with Orderless) as a smaller solution for
  incremental completion in Emacs.

- I like vertico-posframe. I'm not sure if I should. This mode is
  started only when a frame is made (see the end of the config file).
  
- marginalia-mode adds marginalia to the minibuffer completions.
  Marginalia can only add annotations to be displayed with the
  completion candidates.

- Consult provides various practical commands based on the
  Emacs completion function completing-read, which allows to quickly
  select an item from a list of candidates with completion. Consult
  offers in particular an advanced buffer switching command
  consult-buffer to switch between buffers and recently opened files.
  Multiple search commands are provided, an asynchronous consult-grep
  and consult-ripgrep, and consult-line, which resembles Swiper.
   
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package consult
      ;;ensure t
      :after key-seq
      :init
      (message "Use-package: consult")
      :bind
      ;; see also key-chords elsewhere
      ("C-x b" . consult-buffer)
      ("M-g g" . consult-goto-line)
      ("M-y"   . consult-yank-pop)
      ("C-y"   . yank)
      ("C-s"   . consult-line)
      ("M-g o" . consult-outline))

      ;; define some related chords
      (key-seq-define-global "qq"     'consult-buffer)
      (key-seq-define-global "qb"     'consult-bookmark) ; set or jump
      (key-seq-define-global "ql"     'consult-goto-line)

    (use-package consult-notes
      :commands (consult-notes consult-notes-search-in-all-notes)
      :config
      ;(setq consult-notes-file-dir-sources
      ;      '(("Org"         ?o "~/Sync/Org/Denote/")
      ;        ("Journal"      ?j "~/Sync/Org/Journal/")))    
      ;(consult-notes-org-headings-mode)
      (consult-notes-denote-mode))

    (use-package vertico
      ;;ensure t
      :custom
      (vertico-cycle t)
      :init
      (message "Use-package: vertico")
      (vertico-mode))

    (use-package savehist
      :init
      (savehist-mode))

    (use-package vertico-posframe
      :config
      (setq vertico-posframe-border-width 3)
      (setq vertico-posframe-mode t)
      (setq vertico-posframe-poshandler 'posframe-poshandler-frame-top-center)
      (setq vertico-posframe-width 100))

    (use-package orderless
      ;;ensure t
      :custom (completion-styles '(orderless)))

    (use-package marginalia
      :after vertico
      ;;ensure t
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (message "Use-package: marginalia")
      (marginalia-mode))
#+END_SRC


** Implementation 2 : customised via Ivy+Counsel+Swiper
- has ivy-posframe - Note: vertico (above in implementation 1) now has a posframe version. 
- disadvantage of it being monolithic.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package swiper
    ;;ensure t
    :config
    :bind
    ("C-s" . swiper)             ;; Use swiper for search 
    )

  (use-package counsel
    ;;ensure t
    :after key-seq
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-y" . counsel-yank-pop)
    :config
    (progn
      (key-seq-define-global "qq"     'counsel-switch-buffer)
      (key-seq-define-global "qb"     'counsel-bookmark) ; set or jump
      (key-seq-define-global "qo"     'counsel-imenu) 
      (key-seq-define-global "qc"     'counsel-org-capture) ))

  (use-package ivy
    ;;ensure t
    :delight
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    (ivy-mode 1) )

  (use-package ivy-prescient
    ;;ensure t
    :config
    (ivy-prescient-mode 1) )

  ;; popup ivy completion in a separate frame top centre instead of in the minibuffer
  (use-package ivy-posframe
    ;;ensure t
    :after ivy
    :delight 
    :custom-face
    (ivy-posframe-border ((t (:background "#ffffff"))))
    :config
    (ivy-posframe-mode 1)
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-height-alist '((t . 10))
          ivy-posframe-parameters '((internal-border-width . 10)))
    (setq ivy-posframe-parameters
          '((left-fringe . 10)
            (right-fringe . 10)))
    ;;(setq ivy-posframe-parameters '((alpha . 0.95)))
    )

  ;; ivy alternative to marginalia
  (use-package ivy-rich
    ;;ensure t
    :init
    (ivy-rich-mode 1) )

  ;; adds icons to buffer list
  (use-package all-the-icons-ivy-rich
    ;;ensure t
    :init
    (all-the-icons-ivy-rich-mode 1) )
#+END_SRC


* Interaction
** Cut and paste
I use Wayland (no X11), and this interacts with wl-copy.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; - cut and paste in Wayland environment
  ;; - this puts selected text into the Wayland clipboard
  (setq x-select-enable-clipboard t)
  (defun txt-cut-function (text &optional push)
    (with-temp-buffer
      (insert text)
      (call-process-region (point-min) (point-max) "wl-copy" ))
    )
  (setq interprogram-cut-function 'txt-cut-function)
#+END_SRC

** Key-chord and key-seq
Keyboard shortcuts based on double pressing of low-popularity key
combinations (e.g. 'qq'). Key-chord doesn't take account of order
(e.g. 'qa'='aq') so instead I prefer to use key-seq, which requires
the "chord" to be in the right order.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; rapid-double press to activate key chords
  (use-package key-chord
    ;;ensure t
    :init
    (progn
      (message "Use-package: Key-chord" )
      )
    :config
    ;; Max time delay between two key presses to be considered a key chord
    (setq key-chord-two-keys-delay 0.1) ; default 0.1
    ;; Max time delay between two presses of the same key to be considered a key chord.
    ;; Should normally be a little longer than `key-chord-two-keys-delay'.
    (setq key-chord-one-key-delay 0.2) ; default 0.2    
    (key-chord-mode 1) )

  ;; NOTE: additional key-chords are defined within other use-package declarations herein.
  (use-package key-seq
    ;;ensure t
    :after key-chord
    :init
    (progn
      (message "Use-package: Key-seq" )
      ;(key-seq-define-global "kk"     'kill-whole-line)
      (key-seq-define-global "qs"     'consult-notes-search-in-all-notes) ; search org files
      (key-seq-define-global "qi"     'ibuffer-bs-show) 
      (key-seq-define-global "qw"     'other-window)
      (key-seq-define-global "qt"     'org-babel-tangle)
      (key-seq-define-global "qd"     'org-journal-new-entry)
      (key-seq-define-global "qc"     'org-capture) ) )
#+END_SRC

** Splitting window behaviour
Global keys to split the window AND follow by moving point to the new window.

#+BEGIN_SRC emacs-lisp :tangle yes
;; move focus when splitting a window
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
;; move focus when splitting a window
(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Editorconfig
Set configuration on a per directory basis via .editorconfig.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; editorconfig allows specification of tab/space/indent
  (use-package editorconfig
    ;;ensure t
    :delight (editorconfig-mode "Ec")
    :init
    (message "Use-package: EditorConfig")
    :config
    (editorconfig-mode 1) )
(setq whitespace-style '(trailing tabs newline tab-mark newline-mark))
#+END_SRC

** Yasnippet
Expand roots to standard text snippets with M-].

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; location of my snippets -- has to go before yas-reload-all
  (setq-default yas-snippet-dirs '("/home/hewitt/.emacs.d/my_snippets"))
  ;; include yansippet and snippets
  (use-package yasnippet
    :delight (yas-minor-mode "YaS")
    ;;ensure t
    :init
    (message "Use-package: YASnippet")
    :config
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;; hooks for YASnippet in Latex, C++, elisp & org ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (add-hook 'c++-mode-hook 'yas-minor-mode)  
    (add-hook 'latex-mode-hook 'yas-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode)
    ;; remove default keybinding
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    ;; redefine my own key
    (define-key yas-minor-mode-map (kbd "M-]") yas-maybe-expand)
    ;; remove default keys for navigation
    (define-key yas-keymap [(tab)]       nil)
    (define-key yas-keymap (kbd "TAB")   nil)
    (define-key yas-keymap [(shift tab)] nil)
    (define-key yas-keymap [backtab]     nil)
    ;; redefine my own keys
    (define-key yas-keymap (kbd "M-n") 'yas-next-field-or-maybe-expand)
    (define-key yas-keymap (kbd "M-p") 'yas-prev-field)  
    (yas-reload-all) )
#+END_SRC


* Coding environment

Code completion and on-the-fly check/make.

- interaction with a language back-end is done via "eglot" which is an
  alternative to lsp-mode.

- IN-REGION completion is provided by Corfu (Completion Overlay Region
  FUnction). This provides at-point completion in the main buffer
  rather than via a mini-buffer. Completion is requested with a key
  binding.

- Note for eglot: On my Ubuntu 20.04 LTS installation I had to apt
  install g++ with a version that matched the latest version of the
  gcc compiler as noted in the FAQ for ccls: "For example, if you have
  gcc-7, g++-7 and gcc-8 installed (note the omission of g++-8). clang
  may pick the gcc toolchain with the largest version number."

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package corfu
    ;;ensure t
    :init (message "Use-package: Corfu")
    :hook
    (prog-mode . corfu-mode)
    (latex-mode . corfu-mode)
    (org-mode . corfu-mode) )

  ;; GIT-GUTTER: SHOW changes relative to git repo
  (use-package git-gutter
    ;;ensure t
    :defer t
    :delight (git-gutter-mode "Gg")
    :init (message "Use-package: Git-Gutter")
    :hook
    (prog-mode . git-gutter-mode)
    (org-mode . git-gutter-mode) )

  ;; eglot is a simpler alternative to LSP-mode
  (use-package eglot
    ;;ensure t
    :delight (eglot "Eglot")
    :init
    (message "Use-package: Eglot")
    (add-hook 'c++-mode-hook 'eglot-ensure)
    (add-hook 'latex-mode-hook 'eglot-ensure) 
    :custom
    (add-to-list 'eglot-server-programs '(c++-mode . ("ccls")))
    (add-to-list 'eglot-server-programs '(latex-mode . ("digestif"))) )

  ;; NIX language mode
  (use-package nix-mode
    :delight (nix-mode "Nx")
    :mode "\\.nix\\'" ) 

  ;; company gives the selection front end for code completion
  ;; but not the C++-aware backend
  (use-package company
    ;;ensure t
    :delight (company-mode "Co")
    :bind ("M-/" . company-complete)
    :init
    (progn
      (message "Use-package: Company")
      (add-hook 'after-init-hook 'global-company-mode) )
    :config
    (require 'yasnippet)
    (setq company-idle-delay 1)
    (setq company-minimum-prefix-length 3)
    (setq company-idle-delay 0)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-align-annotations t)
    (setq company-frontends '(company-pseudo-tooltip-frontend 
                              company-echo-metadata-frontend) ) )
#+END_SRC


* Magit
Trying to use it!

#+BEGIN_SRC emacs-lisp :tangle yes
;; MAGIT
(use-package magit
  ;;ensure t
  :defer t
  :bind
  ("C-x g" . magit-status)
  :init
  (message "Use-package: Magit installed")
  )
#+END_SRC


* Org mode
** Basics of Org mode
A fairly standard Org mode configuration. Some minor tweaks to
colourise bold/italic/underline for use with bitmap fonts.

#+BEGIN_SRC  emacs-lisp :tangle yes
  (use-package org
    ;;ensure t
    :after key-seq
    :init
    (message "Use-package: Org") )

  ;; fancy replace of *** etc
  (use-package org-bullets
    ;;ensure t
    :after org
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode)
    (message "Use-package: Org-bullets") )

  ;; replace emphasis with colors in Org files
  (setq org-emphasis-alist
         '(("*" my-org-emphasis-bold)
           ("/" my-org-emphasis-italic)
           ("_" underline)
           ("=" org-verbatim verbatim)
           ("~" org-code verbatim)
           ("+" (:strike-through t))))

   (defface my-org-emphasis-bold
     '((default :inherit bold)
       (((class color) (min-colors 88) (background light))
        :foreground "#a60000")
       (((class color) (min-colors 88) (background dark))
        :foreground "#ff8059"))
     "My bold emphasis for Org.")

   (defface my-org-emphasis-italic
     '((default :inherit italic)
       (((class color) (min-colors 88) (background light))
        :foreground "#005e00")
       (((class color) (min-colors 88) (background dark))
        :foreground "#44bc44"))
     "My italic emphasis for Org.")

   (defface my-org-emphasis-underline
     '((default :inherit underline)
       (((class color) (min-colors 88) (background light))
        :foreground "#813e00")
       (((class color) (min-colors 88) (background dark))
        :foreground "#d0bc00"))
     "My underline emphasis for Org.")


     ;; ORG link to mu4e emails -- see mu from https://github.com/djcb/mu
     ;(require 'org-mu4e)
     ;(setq org-mu4e-link-query-in-headers-mode nil)

     ;; custom capture
     (require 'org-capture)
     ;;(define-key global-map "\C-cc" 'org-capture) ; see key-chord/seq
     (setq org-capture-templates
           '(
             ("t" "Todo" entry (file+headline "~/Sync/Org/Todo.org" "Inbox")
              "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
             ("z" "Zoom meeting" entry (file+headline "~/Sync/Org/Todo.org" "Meetings")
              "* TODO Zoom, %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%i\n"
              :empty-lines 1)) )

     ;; Agenda is constructed from org files in ONE directory
     (setq org-agenda-files '("~/Sync/Org"))

     ;; refile to targets defined by the org-agenda-files list above
     (setq org-refile-targets '((nil :maxlevel . 3)
                                (org-agenda-files :maxlevel . 3)))
     (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
     (setq org-refile-use-outline-path t)                  ; Show full paths for refiling

     ;; store DONE time in the drawer
     (setq org-log-done (quote time))
     (setq org-log-into-drawer t)

     ;; Ask and store note if rescheduling
     (setq org-log-reschedule (quote note))

     ;; syntax highlight latex in org files
     (setq org-highlight-latex-and-related '(latex script entities))

     ;; define the number of days to show in the agenda
     (setq org-agenda-span 14
           org-agenda-start-on-weekday nil
           org-agenda-start-day "-3d")

     ;; used for org timers?
     (key-seq-define-global "qp"     'org-timer-set-timer)
     ;; default duration of events
     (setq org-agenda-default-appointment-duration 60)

     (setq org-agenda-prefix-format '(
      ;;;; (agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
                                      (agenda  . "  •  %-12:c%?-12t% s")
                                      (timeline  . "  % s")
                                      (todo  . " %i %-12:c")
                                      (tags  . " %i %-12:c")
                                      (search . " %i %-12:c")))
    
#+END_SRC

** Org-babel

Reproducible research aide.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package gnuplot
  ;;     :ensure t
  ;;     :init
  ;;     (message "Use-package: gnuplot for babel installed") )
  ;;   ;; languages I work in via babel
  ;;   (org-babel-do-load-languages
  ;;    'org-babel-load-languages
  ;;    '((gnuplot . t) (emacs-lisp . t) (shell . t) (python . t)))
  ;;   ;; stop it asking if I'm sure about evaluation
  ;;   (setq org-confirm-babel-evaluate nil)

   (defun my-tab-related-stuff ()
     (setq indent-tabs-mode nil)
     ;;(setq tab-stop-list (number-sequence 4 200 4))
     (setq tab-width 2)
     ;;(setq indent-line-function 'insert-tab)
     )

  (add-hook 'org-mode-hook 'my-tab-related-stuff)
#+END_SRC

** Denote
This is an Org-roam alternative. It appeals to me because of its
simplicity, focus, spectacular documentation and its from an author
who writes great content.

Searching the Denote files is done via the "consult-notes" package. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'denote)

  ;; Remember to check the doc strings of those variables.
  (setq denote-directory (expand-file-name "~/Sync/Org/Denote/"))
  (setq denote-known-keywords '("research" "admin" "industry" "teaching" "home" "attachment"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(title keywords))

  ;; We allow multi-word keywords by default.  The author's personal
  ;; preference is for single-word keywords for a more rigid workflow.
  (setq denote-allow-multi-word-keywords t)

  (setq denote-date-format nil) ; read doc string

  ;; You will not need to `require' all those individually once the
  ;; package is available.
  ;;(require 'denote-retrieve)
  ;;(require 'denote-link)

  ;; By default, we fontify backlinks in their bespoke buffer.
  (setq denote-link-fontify-backlinks t)

  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
  ;; advanced.

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

  ;;(require 'denote-dired)
  (setq denote-dired-rename-expert nil)

  ;; We use different ways to specify a path for demo purposes.
  ;;(setq denote-dired-directories
  ;;      (list denote-directory
  ;;            (thread-last denote-directory (expand-file-name "attachments"))
  ;;            (expand-file-name "~/Documents/books")))

  ;; Generic (great if you rename files Denote-style in lots of places):
  ;; (add-hook 'dired-mode-hook #'denote-dired-mode)
  ;;
  ;; OR if only want it in `denote-dired-directories':
  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

  ;; Denote does not define any key bindings.  This is for the user to
  ;; decide.  For example:
  (let ((map global-map))
    (define-key map (kbd "C-c n n") #'denote)
    (define-key map (kbd "C-c n N") #'denote-type)
    (define-key map (kbd "C-c n d") #'denote-date)
    (define-key map (kbd "C-c n s") #'denote-subdirectory)
    ;; If you intend to use Denote with a variety of file types, it is
    ;; easier to bind the link-related commands to the `global-map', as
    ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
    ;; `markdown-mode-map', and/or `text-mode-map'.
    (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
    (define-key map (kbd "C-c n I") #'denote-link-add-links)
    (define-key map (kbd "C-c n l") #'denote-link-find-file) ; "list" links
    (define-key map (kbd "C-c n b") #'denote-link-backlinks)
    ;; Note that `denote-dired-rename-file' can work from any context, not
    ;; just Dired bufffers.  That is why we bind it here to the
    ;; `global-map'.
    (define-key map (kbd "C-c n r") #'denote-dired-rename-file))

  (with-eval-after-load 'org-capture    
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("n" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))

  ;; I still like "org-journal" rather than using "denote".
  (use-package org-journal
    ;;ensure t
    :init
    (message "Use-package: Org-journal")
    :config
    (setq org-journal-dir "~/Sync/Org/Journal/"
          org-journal-date-format "%A, %d %B %Y"
          org-journal-file-format "%Y_%m_%d"
          org-journal-time-prefix "  - "
          org-journal-time-format nil
          org-journal-file-type 'monthly)  )

#+END_SRC 
                 
** Search through the Org/Denote directory via Deft

Allows direct searching of my Denote notes.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package deft
    ;;ensure t
    :init
    (message "Use-package: Deft")
    :config
    (setq deft-recursive t)
    ;; Org-Roam v2 now stores :properties: on line 1, so below uses the filename in deft list
    ;; (setq deft-use-filename-as-title t)
    ;; Prot's "denote" doesn't need above
    (setq deft-default-extension "org")
    (setq deft-directory "/home/hewitt/Sync/Org/Denote")
    )
#+END_SRC


* Elfeed

2022: taken out.

RSS reader. The feed list can be setq below.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package elfeed
    ;;ensure t
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-curl-max-connections 10)
    (setq elfeed-db-directory "~/.emacs.d/elfeed/")
    (setq elfeed-enclosure-default-dir "~/Downloads/")
    (setq elfeed-search-filter "@1-week-ago +unread")
    (setq elfeed-sort-order 'descending)
    ;(setq elfeed-search-clipboard-type 'CLIPBOARD)
    (setq elfeed-search-title-max-width 100)
    (setq elfeed-search-title-min-width 30)
    (setq elfeed-search-trailing-width 25)
    (setq elfeed-show-truncate-long-urls t)
    (setq elfeed-show-unique-buffers t)
    (setq elfeed-feeds
     '(("https://protesilaos.com/codelog.xml" emacs tech)
       ("https://irreal.org/blog/?feed=rss2" emacs tech)
       ("http://feeds.feedburner.com/XahsEmacsBlog" emacs tech)
       ("http://pragmaticemacs.com/feed/" emacs tech)
       ("http://feeds.bbci.co.uk/news/technology/rss.xml" news tech)
       ("https://www.theverge.com/rss/index.xml" news tech)
       ("https://emacsredux.com/atom.xml" emacs tech)
       ("https://www.phoronix.com/rss.php" tech)
       ("https://www.techradar.com/uk/rss/news/computing" tech)
       ))
    ;; see https://protesilaos.com/dotemacs/
    (defun prot/elfeed-show-eww (&optional link)
      "Browse current `elfeed' entry link in `eww'.
  Only show the readable part once the website loads.  This can
  fail on poorly-designed websites."
      (interactive)
      (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                        elfeed-show-entry
                      (elfeed-search-selected :ignore-region)))
             (link (if link link (elfeed-entry-link entry))))
        (eww link)
        (add-hook 'eww-after-render-hook 'eww-readable nil t))
        ) ;close defun

    :bind
    (("C-c f" . elfeed)
           :map elfeed-search-mode-map
          ("e" . prot/elfeed-show-eww)
          ) )
#+END_SRC
 

* PDF tools
This is a great tool if you have to comment on or otherwise annotate
PDFs. The standard method for adding a text comment can be faster
than trying to scribble a hadnwritten note via other methods.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; pdf tools for organising and annotating PDF
  (use-package pdf-tools
    ;;ensure t
    :config
    (pdf-tools-install) )
#+END_SRC
 

* Email/mu4e
You need the "mu" package and also the executable "mbsync" (the
package that mbsync is in is called "isync"). Existing solution was
broken by move to Oauth2 in O365. Now I run "davmail" as an
intermediary, with IMAP/SMTP on localhost which seems to run well.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Feb 2023 : mu is not installed via Nix so no need to specialise
  ;; mu4e is part of the "mu" package and sometimes doesn't get
  ;; found auto-magically. So this points directly to it.
  ;; (add-to-list 'load-path "/home/hewitt/local/share/emacs/site-lisp/mu4e")

  ;; defines mu4e exists, but holds off until needed
  (autoload 'mu4e "mu4e" "Launch mu4e and show the main window" t)

  ;; used for outgoing mail send
  (use-package smtpmail
    ;;ensure t
    :defer t
    :init
    (message "Use-package: SMTPmail")
    (setq message-send-mail-function 'smtpmail-send-it
          user-mail-address "richard.hewitt@manchester.ac.uk"
          ;;smtpmail-default-smtp-server "outgoing.manchester.ac.uk"
          smtpmail-default-smtp-server "localhost" ; davmail runs locally
          ;;smtpmail-local-domain "manchester.ac.uk"
          smtpmail-smtp-server "localhost"
          ;;smtpmail-stream-type 'starttls
          smtpmail-smtp-service 1025) )

  ;; 2018 : this stops errors associated with duplicated UIDs -- LEAVE IT HERE!
  (setq mu4e-change-filenames-when-moving t)
  ;; general mu4e config
  (setq mu4e-maildir (expand-file-name "/home/hewitt/CURRENT/mbsyncmail"))
  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/Sent") ; they still seem to appear in O365 despite this not being "Sent Items"
  (setq mu4e-trash-folder  "/Deleted Items") ; I don't sync Deleted Items & largely do permanent delete "D" rather than move to trash "d"
  (setq message-signature-file "/home/hewitt/CURRENT/dot.signature")
  (setq mu4e-headers-show-thread nil)
  (setq mu4e-headers-include-related nil)
  (setq mu4e-headers-results-limit 200)
  (setq mu4e-mu-binary (executable-find "mu"))
  ;; stop mail draft/sent appearing in the recent files list of the dashboard
  ;;(add-to-list 'recentf-exclude "\\mbsyncmail\\")
  ;; how to get mail
  (setq mu4e-get-mail-command "mbsync Work"
        mu4e-html2text-command "w3m -T text/html"
        ;;mu4e-html2text-command "html2markdown --body-width=72" 
        ;;mu4e-update-interval 300
        ;;mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include t)

  ;; the headers to show 
  ;; in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
        '((:human-date    .  15)    ;; alternatively, use :date
          (:flags        .   6)
          (:from         .  22)
          (:subject      .  nil))  ;; alternatively, use :thread-subject
        )
  (setq mu4e-maildir-shortcuts
        '( ("/INBOX"          . ?i)
           ("/Sent"           . ?s)
           ("/Deleted Items"  . ?t)
           ("/Drafts"         . ?d)) )
  ;; REMOVE BELOW FOR TERMINAL EMACS
  ;; show images
  (setq mu4e-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types) )
  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "richard.hewitt@manchester.ac.uk"
        user-mail-address "richard.hewitt@manchester.ac.uk"
        user-full-name  "Rich Hewitt")
  (setq mu4e-sent-messages-behavior 'sent)

  ;; spell check during compose
  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "My settings for message composition."
              (set-fill-column 72)
              (flyspell-mode)
              ;; turn off autosave, otherwise we end up with multiple
              ;; versions of sent/draft mail being sync'd
              (auto-save-mode -1) ) )
#+END_SRC

* AGE
Replaced GPG with simpler AGE from the end of 2022.
Update Jan/2023: now this mode is available from MELPA so Quelpa removed below.

I prefer "armor" off so I can see from the terminal that files
support all the specified identities.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package age
    ;;; :quelpa (age :fetcher github :repo "anticomputer/age.el") 
    :ensure t
    :demand
    :custom
    (age-program "rage")
    (age-default-identity "~/CURRENT/AGE/age-yubikey-identity-bb978fd1.txt")
    (age-default-recipient
     '("~/CURRENT/AGE/backupKey.pub"
       "~/CURRENT/AGE/age-yubikey-identity-bb978fd1.pub"))
    :config
    (setq age-armor nil) ;; don't convert to ASCII so I can see the key headers
    (age-file-enable))
#+END_SRC


* Testing Meow

#+BEGIN_SRC emacs-lisp :tangle yes
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

   (require 'meow)
   (meow-setup)
   (meow-global-mode 1)
#+END_SRC

* Wrap up
Wrap up the config with some shortcut definitions and select the theme

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; simple prefix key launcher
    (global-set-key (kbd "C-c h m") 'mu4e)
    (global-set-key (kbd "C-c h a") 'org-agenda)
    ;; C-c h e : edit the init.el configuration file
    (defun config-visit ()
      (interactive)
      (find-file "~/CURRENT/NixConfig/outOfStore/.emacs.d/config.org") )
    (global-set-key (kbd "C-c h e") 'config-visit)
    ;; C-c h e : edit the init.el configuration file
    (defun todo-visit ()
      (interactive)
      (find-file "~/Sync/Org/Todo.org") )
    (global-set-key (kbd "C-c h t") 'todo-visit)

    ;; load default theme last.
    (load-theme 'ef-duo-dark :no-confirm)

    ;; because we use daemon/client we have to initiate the posframe
    ;; mode only once a frame is made
    (add-hook 'after-make-frame-functions
      (lambda (frame)
        (select-frame frame)
        (when (display-graphic-p frame)
          (vertico-posframe-mode 1))))
#+END_SRC


