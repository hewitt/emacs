#+TITLE: EmacsConfig
#+AUTHOR: Rich Hewitt
#+EMAIL: richard.hewitt@manchester.ac.uk
#+STARTUP: indent
#+PROPERTY: header-args :results silent :tangle "./config.el"

To convert this to "./config.el" do M-x org-babel-tangle.

* Basic
** Package archives: ELPA/MELPA

Standard content to configure ELPA and MELPA for packages.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;;;
  ;;;; CONFIGURE MELPA AND GNU ARCHIVES
  ;;;;
  (require 'package)
  (setq package-archives
      '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/"))
      package-archive-priorities ; prefer ELPA to MELPA
      '(("GNU ELPA"     . 10)
        ("MELPA"        . 5 )))
  (package-initialize)

  ;;;;
  ;;;; CONFIGURE USE-PACKAGE TO AUTOLOAD THINGS : https://github.com/jwiegley/use-package
  ;;;;
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package) )

  ;; this is the standard use-package invocation if it is in ~/.emacs.d
  (eval-when-compile
    (require 'use-package) )

  ;; Keep custom settings in a separate file to not pollute this one
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
#+END_SRC

** Identify which machine I'm running on

There are some minor things I want to run, but only on one of the machines I use.
So here we define a quick function to check the machine based on the system name.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun system-is-Blasius ()
    (interactive)
    "True for Blasius laptop"
    (string-equal system-name "Blasius"))
  (defun system-is-Orthanc ()
    (interactive)
    "True for Orthanc desktop"
    (string-equal system-name "Orthanc"))
#+END_SRC

** Change some of the default emacs variables

Some random minor tweaks. Turn off scroll bar, tool bar, menu bar. Move all backups to a single folder. Minor tweaks to garbage collection.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; move backups to stop *~ proliferation
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  ;; have mouse input in the terminal
  ;; the disadvantage is you need to SHIFT+middle mouse to paste in the terminal
  (xterm-mouse-mode 1)
  ;; Turn off the menu/scroll/toolbar
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;; this stops the cursor recentering on leaving the page
  ;; ie. stop scrolling by 0.5 page
  (setq scroll-conservatively 101 )
  ;; replace annoying yes/no with y/n
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; don't end sentences with a single space
  (setq sentence-end-double-space nil)
  ;; the frequency of garbage collection by making it happen on
  ;; each 8MB of allocated data (the default is on every 0.8MB)
  (setq gc-cons-threshold 8000000)
  ;; report GC events
  (setq garbage-collection-messages t)
  ;; warn when opening files bigger than 80MB
  (setq large-file-warning-threshold 80000000)
  ;; always follow the symlink
  (setq vc-follow-symlinks t)
  #+END_SRC

** Update buffer contents when file changes on "disk"

When editing the same file on a shared drive/remote machine, make sure
that we update any open buffers to show the on-file current status.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
  ;; This COMMAND will load a buffer if it changes on disk, which is
  ;; super handy if editing from multiple machines over long periods.
  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
  (global-auto-revert-mode 1)
#+END_SRC

** Add custom file extensions to set major modes

I use "m4" to update headers/footers/dates in LaTeX files for teaching material.
So here we default to latex-mode for .m4 extensions. In addition ".gnu" for Gnuplot
and ".m" for Octave.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; setup files ending in “.m4” to open in LaTeX-mode
  ;; for use in lecture note construction
  (add-to-list 'auto-mode-alist '("\\.m4\\'" . latex-mode))
  ;; my default gnuplot extension
  (add-to-list 'auto-mode-alist '("\\.gnu\\'" . gnuplot-mode))
  ;; Octave/Matlab
  (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+END_SRC


* Appearance
** Delight

Delight declutters the modeline by reducing the amount of mode information.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package delight
    :ensure t
    :init (message "Use-package: Delight") )
  ;; delight some basic modes to get rid of modeline content
  (delight 'eldoc-mode "" 'eldoc)
  (delight 'abbrev-mode "" 'abbrev)
#+END_SRC

** Dashboard

Dashboard is the startup screen for quick access to previously used material.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; dashboard runs at startup by default
  (use-package dashboard
    :ensure t
    :delight "Dash"
    :init
    (message "Use-package: Dashboard")
    :config
    (setq dashboard-banner-logo-title "Go!")
    (setq dashboard-startup-banner 'logo) ; 1,2,3 are the text banners
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (agenda . 4)))
    (dashboard-setup-startup-hook) )
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ; show dashboard on startup for emacsclients when running the daemon
#+END_SRC

** Modus theme choices

I've switched away from doom-themes to the more systematic & consistent modus-* themes from Protesilaos Stavrou.

#+BEGIN_SRC emacs-lisp :tangle yes
  (set-face-attribute 'default nil
                      :family "Iosevka SS05" :height 130 :weight 'normal :width 'expanded )
  (set-face-attribute 'variable-pitch nil
                      :family "Iosevka" :height 1.0 :weight 'normal)
  (set-face-attribute 'fixed-pitch nil
                      :family "Iosevka Fixed" :height 1.0 :weight 'normal :width 'expanded)
  (use-package modus-themes
    :ensure t
    :init
    (message "Use-package: modus-theme")
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t ; allow italics
          modus-themes-bold-constructs t ; allow bold font use
          modus-themes-syntax 'yellow-comments-green-strings ; highlighting
          modus-themes-mode-line 'borderless ; add vertical separators
          modus-themes-prompts 'intense-accented
          modus-themes-lang-checkers 'colored-background
          modus-themes-completions 'opinionated ; {nil,'moderate,'opinionated}
          ;modus-themes-intense-hl-line t ; v.1.2.x
          modus-themes-hl-line 'intense-background ; v.1.3.0
          modus-themes-org-blocks 'rainbow ; {nil,'greyscale,'rainbow}
          modus-themes-paren-match 'intense-bold ;
          modus-themes-scale-headings t ; scale heading text
          modus-themes-rainbow-headings t
          modus-themes-scale-1 1.05
          modus-themes-scale-2 1.1
          modus-themes-scale-3 1.15
          modus-themes-scale-4 1.2
          modus-themes-scale-5 1.3)      
    ;; allow for color changes : so far I've only lifted bg-main up slightly
    (setq modus-themes-vivendi-color-overrides
          ;'((bg-main . "#1a1f26") ; I've lifted this slightly
	      '((bg-main . "#181a26") ; I've lifted this a lot
            (bg-dim . "#161129")
            (bg-alt . "#181732")
            (bg-hl-line . "#282a36")
            (bg-active . "#282e46")
            (bg-inactive . "#1a1e39")
            (bg-region . "#393a53")
            (bg-header . "#202037")
            (bg-tab-bar . "#262b41")
            (bg-tab-active . "#120f18")
            (bg-tab-inactive . "#3a3a5a")
            (fg-unfocused . "#9a9aab")))
    (setq global-hl-line-mode t)
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    ;;(modus-themes-load-operandi) ;; OR 
    (modus-themes-load-vivendi)
    :bind 
    ("<f5>" . modus-themes-toggle) )
  #+END_SRC

** Modeline (doom)

Doom modeline is my default choice, just to add a bit of usability to the standard mode line. 

#+BEGIN_SRC emacs-lisp :tangle yes
;; modeline
(use-package doom-modeline
  :ensure t
  :init (message "Use-package: Doom-modeline")
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Whether display icons or not (if nil nothing will be showed).
  (setq doom-modeline-icon t)
  ;; Display the icon for the major mode. 
  (setq doom-modeline-major-mode-icon t )
  ;; Display color icons for `major-mode' 
  (setq doom-modeline-major-mode-color-icon t)
  ;; Display minor modes or not?
  (setq doom-modeline-minor-modes t)
  ;; Whether display icons for buffer states.
  (setq doom-modeline-buffer-state-icon t)
  ;; Whether display buffer modification icon.
  (setq doom-modeline-buffer-modification-icon t)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)
  ;; If non-nil, only display one number for checker information if applicable.
  ; (setq doom-modeline-checker-simple-format t)
  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 6)
  ;; Whether display perspective name or not. Non-nil to display in mode-line.
  ;(setq doom-modeline-persp-name t)
  ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)  )
#+END_SRC

** Rainbow-delimiters

Colorised brackets to make matching easier.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; colourise those brackets
  (use-package rainbow-delimiters
    :ensure t
    :init
    (message "Use-package: Rainbow delimiters")
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'latex-mode-hook 'rainbow-delimiters-mode) )
#+END_SRC

** Which-key

Popup a description of key combinations after a delay.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :delight 
    :init 
    (message "Use-package: Which-key mode")
    :config
    (setq which-key-idle-delay 0.25)
    (which-key-mode) )
#+END_SRC

** Appearance hooks for modes
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; defaullt to spelll check in latex
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'hl-line-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC


* Narrowing and completion
** overview
A useful overview from: https://www.reddit.com/r/emacs/comments/k3c0u7/consult_counselswiper_alternative_for/

The minibuffer completion uses:

+ "completing-read" to define what the completion UI looks like and how it behaves.

+ "completing-styles" to define how completion filter/sorts results (e.g. does typing "fi fil" match "find-file").

In terms of packages:

+ "icomplete", "fido" and "Selectrum" all just set the "completing-read" function and implement continuous completion on each key press (not technically true for "icomplete" for close enough). 

+ "Orderless", "Prescient", and the built-in "flex" are completion-styles to allow convenient filters like regex, and sorting by frequency/recency.

+ "icomplete-vertical" is a minor mode to make "icomplete" vertical.

+ "Consult" is a set of functions to use various Emacs facilities via completing-read.

+ "Embark" is a minor mode to allow each minibuffer entry to have multiple actions.

All of the above try to use the minibuffer's existing hooks and extension mechanisms, and benefit from large parts of the rest of Emacs using those mechanisms too. Consequently, they all interoperate with each other and other parts of the Emacs ecosystem. You can pick which you want.

Modes that don't attempt to interop (and thus I avoid):

+ "Ido" performs the same role as "completing-read", but doesn't set "completing-read" and so only works for functions that use Ido's own completing function. "ido-ubiquitious" sets ido to be completing-read. ido appears to be considered somewhat deprecated on emacs-devel, in favour of icomplete.

+ "Ivy" doesn't use completing-read at all, and does its own filtering (rather than use completion-styles). 

+ "Swiper" uses Ivy. I replace with just `C-s`.

+ "Counsel" is a set of functions to use various parts of Emacs via minibuffer completion. Very convenient, but only works if you also have "Ivy/Swiper". "Consult" is like "Counsel" but uses the built-in minibuffer completion.

+ "Helm" doesn't use "completing-read", but does add multiple actions on each selection. I would use "embark" if I wanted this functionality, but I don't.


** Implementation 1 : everything done using standard completing-read interface
- Use Vertico (with Orderless) as a smaller solution for
  incremental completion in Emacs. 
  
- marginalia-mode adds marginalia to the minibuffer completions.
  Marginalia can only add annotations to be displayed with the
  completion candidates.

- Consult provides various practical commands based on the
  Emacscompletion function completing-read, which allows to quickly
  select an item from a list of candidates with completion. Consult
  offers in particular an advanced buffer switching command
  consult-buffer to switch between buffers and recently opened files.
  Multiple search commands are provided, an asynchronous consult-grep
  and consult-ripgrep, and consult-line, which resembles Swiper.
   
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package consult
    :ensure t
    :after key-seq
    :init
    (message "Use-package: consult")
    :bind
    ;; see also key-chords elsewhere
    ("C-x b" . consult-buffer)
    ("M-g g" . consult-goto-line)
    ("M-y"   . consult-yank-pop)
    ("C-y"   . yank)
    ("C-s"   . consult-line)
    ("M-g o" . consult-outline)
    :config
    (progn
      (key-seq-define-global "qq"     'consult-buffer)
      (key-seq-define-global "qb"     'consult-bookmark) ; set or jump
      (key-seq-define-global "ql"     'consult-goto-line) 
      ))
    
    (use-package vertico
      :ensure t
      :custom
      (vertico-cycle t)
      :init
      (message "Use-package: vertico")
      (vertico-mode))

    (use-package savehist
      :init
      (savehist-mode))

    (use-package orderless
      :ensure t
      :custom (completion-styles '(orderless)))

    (use-package marginalia
      :after vertico
      :ensure t
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (message "Use-package: marginalia")
      (marginalia-mode))
#+END_SRC


** Implementation 2 : customised via Ivy+Counsel+Swiper
- has the (big!) advantage of ivy-posframe, which I like!
- disadvantage of it being monolithic

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package swiper
    :ensure t
    :config
    :bind
    ("C-s" . swiper)             ;; Use swiper for search 
    )

  (use-package counsel
    :ensure t
    :after key-seq
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-y" . counsel-yank-pop)
    :config
    (progn
      (key-seq-define-global "qq"     'counsel-switch-buffer)
      (key-seq-define-global "qb"     'counsel-bookmark) ; set or jump
      (key-seq-define-global "qo"     'counsel-imenu) 
      (key-seq-define-global "qc"     'counsel-org-capture)
    ))

  (use-package ivy
    :ensure t
    :delight
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    (ivy-mode 1) )

  (use-package ivy-prescient
    :ensure t
    :config
    (ivy-prescient-mode 1) )

  ;; popup ivy completion in a separate frame top centre instead of in the minibuffer
  (use-package ivy-posframe
    :ensure t
    :after ivy
    :delight 
    :custom-face
    (ivy-posframe-border ((t (:background "#ffffff"))))
    :config
    (ivy-posframe-mode 1)
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-height-alist '((t . 10))
          ivy-posframe-parameters '((internal-border-width . 10)))
    (setq ivy-posframe-parameters
          '((left-fringe . 10)
            (right-fringe . 10)))
    ;;(setq ivy-posframe-parameters '((alpha . 0.95)))
    )

  ;; ivy alternative to marginalia
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1) )

  ;; adds icons to buffer list
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init
    (all-the-icons-ivy-rich-mode 1) )
#+END_SRC



* Interaction
** Cut and paste

I run on Wayland, and this interacts with wl-copy.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; cut and paste in Wayland environmen
  (setq x-select-enable-clipboard t)
  (defun txt-cut-function (text &optional push)
    (with-temp-buffer
      (insert text)
      (call-process-region (point-min) (point-max) "wl-copy" ))
    )
  ;; (defun txt-paste-function()
  ;;   (let ((xsel-output (shell-command-to-string "wl-paste")))
  ;;     (unless (string= (car kill-ring) xsel-output)
  ;;       xsel-output ))
  ;;   )
  (setq interprogram-cut-function 'txt-cut-function)
  ;; (setq interprogram-paste-function 'txt-paste-function)
#+END_SRC

** Key-chord and key-seq

Keyboard shortcuts based on double pressing of low-frequency keys (e.g. 'qq').
Key-chord doesn't take account of order (e.g. 'qa'='aq') so instead I prefer to
use key-seq, which requires the "chord" to be in the right order.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; rapid-double press to activate key chords
  (use-package key-chord
    :ensure t
    :init
    (progn
      (message "Use-package: Key-chord" )
      )
    :config
    ;; Max time delay between two key presses to be considered a key chord
    (setq key-chord-two-keys-delay 0.1) ; default 0.1
    ;; Max time delay between two presses of the same key to be considered a key chord.
    ;; Should normally be a little longer than `key-chord-two-keys-delay'.
    (setq key-chord-one-key-delay 0.2) ; default 0.2    
    (key-chord-mode 1) )

  ;; I like key-chord but the order of the keys is ignored ie. qs is equivalent to sq
  ;; instead key-seq checks the order -- but relies on key-chord-mode still
  ;;
  ;; NOTE: additional key-chords are defined within other use-package declarations herein.
  (use-package key-seq
    :ensure t
    :after key-chord
    :init
    (progn
      (message "Use-package: Key-seq" )
      (key-seq-define-global "kk"     'kill-whole-line)
      (key-seq-define-global "qs"     'deft) ; search org files
      (key-seq-define-global "qi"     'ibuffer-bs-show) 
      (key-seq-define-global "qw"     'other-window)
      (key-seq-define-global "qt"     'org-babel-tangle)
      (key-seq-define-global "qd"     'org-journal-new-entry)  ) )
#+END_SRC

** Splitting window behaviour

Global keys to split the window AND follow by moving point to the new window.

#+BEGIN_SRC emacs-lisp :tangle yes
;; move focus when splitting a window
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
;; move focus when splitting a window
(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Editorconfig

Set configuration on a per directory basis via .editorconfig.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; editorconfig allows specification of tab/space/indent
  (use-package editorconfig
    :ensure t
    :delight (editorconfig-mode "Ec")
    :init
    (message "Use-package: EditorConfig")
    :config
    (editorconfig-mode 1) )
#+END_SRC

** Yasnippet

Expand roots to standard text snippets with M-].

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; location of my snippets -- has to go before yas-reload-all
  (setq-default yas-snippet-dirs '("/home/hewitt/CURRENT/dot.config/emacs.d/my_snippets"))
  ;; include yansippet and snippets
  (use-package yasnippet
    :delight (yas-minor-mode "YaS")
    :ensure t
    :init
    (message "Use-package: YASnippet")
    :config
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;; hooks for YASnippet in Latex, C++, elisp & org ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (add-hook 'c++-mode-hook 'yas-minor-mode)  
    (add-hook 'latex-mode-hook 'yas-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode)
    ;; remove default keybinding
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    ;; redefine my own key
    (define-key yas-minor-mode-map (kbd "M-]") yas-maybe-expand)
    ;; remove default keys for navigation
    (define-key yas-keymap [(tab)]       nil)
    (define-key yas-keymap (kbd "TAB")   nil)
    (define-key yas-keymap [(shift tab)] nil)
    (define-key yas-keymap [backtab]     nil)
    ;; redefine my own keys
    (define-key yas-keymap (kbd "M-n") 'yas-next-field-or-maybe-expand)
    (define-key yas-keymap (kbd "M-p") 'yas-prev-field)  
    (yas-reload-all)
    )
#+END_SRC


* Coding environment

Code completion and on-the-fly check/make.

- interaction with a language back-end is done via "eglot" which is an
  alternative to lsp-mode.

- IN-REGION completion is provided by Corfu (Completion Overlay Region
  FUnction). This provides at-point completion in the main buffer
  rather than via a mini-buffer. Completion is requested with a key
  binding.

- Note for eglot: On my Ubuntu 20.04 LTS installation I had to apt
install g++ with a version that matched the latest version of the gcc
compiler as noted in the FAQ for ccls: "For example, if you have
gcc-7, g++-7 and gcc-8 installed (note the omission of g++-8). clang
may pick the gcc toolchain with the largest version number."

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; corfu
  (use-package corfu
  :ensure t
  :init (message "Use-package: Corfu")
  :hook
  (prog-mode . corfu-mode)
  (latex-mode . corfu-mode)
  (org-mode . corfu-mode)
  )
  ;; GIT-GUTTER: SHOW changes relative to git repo
  (use-package git-gutter
    :ensure t
    :defer t
    :delight (git-gutter-mode "Gg")
    :init (message "Use-package: Git-Gutter")
    :hook
    (prog-mode . git-gutter-mode)
    (org-mode . git-gutter-mode) )

  ;; eglot is a simpler alternative to LSP-mode
  (use-package eglot
    :ensure t
    :delight (eglot "Eglot")
    :init
    (message "Use-package: Eglot")
    (add-hook 'c++-mode-hook 'eglot-ensure)
    (add-hook 'latex-mode-hook 'eglot-ensure) 
    :custom
    (add-to-list 'eglot-server-programs '(c++-mode . ("ccls")))
    (add-to-list 'eglot-server-programs '(latex-mode . ("digestif"))) )

  ;; ;; company gives the selection front end for code completion
  ;; ;; but not the C++-aware backend
  ;; (use-package company
  ;;   :ensure t
  ;;   :delight (company-mode "Co")
  ;;   :bind ("M-/" . company-complete)
  ;;   :init
  ;;   (progn
  ;;     (message "Use-package: Company")
  ;;     (add-hook 'after-init-hook 'global-company-mode))
  ;;   :config
  ;;   (require 'yasnippet)
  ;;   ;;(setq company-idle-delay 1)
  ;;   (setq company-minimum-prefix-length 3)
  ;;   (setq company-idle-delay 0)
  ;;   (setq company-selection-wrap-around t)
  ;;   (setq company-tooltip-align-annotations t)
  ;;   (setq company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
  ;;                             company-echo-metadata-frontend) ) )
#+END_SRC


* Magit

#+BEGIN_SRC emacs-lisp :tangle yes
;; MAGIT
(use-package magit
  :ensure t
  :defer t
  :bind
  ("C-x g" . magit-status)
  :init
  (message "Use-package: Magit installed")
  )
#+END_SRC


* Org mode
** Basics of Org mode

#+BEGIN_SRC  emacs-lisp :tangle yes
  (use-package org
    :ensure t
    :init
    (message "Use-package: Org") )

  ;; fancy replace of *** etc
  (use-package org-bullets
    :ensure t
    :after org
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode)
    (message "Use-package: Org-bullets") )

  ;; ORG link to mu4e -- see mu from https://github.com/djcb/mu
  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)

  ;; custom capture
  (require 'org-capture)
  ;;(define-key global-map "\C-cc" 'org-capture) ; see key-chord/seq
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/Sync/Org/Todo.org" "Inbox")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
          ("z" "Zoom meeting" entry (file+headline "~/Sync/Org/Todo.org" "Meetings")
           "* TODO Zoom, %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%i\n"
           :empty-lines 1)) )

  ;; Agenda is constructed from org files in ONE directory
  (setq org-agenda-files '("~/Sync/Org"))

  ;; refile to targets defined by the org-agenda-files list above
  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)))
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling

  ;; store DONE time in the drawer
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)

  ;; Ask and store note if rescheduling
  (setq org-log-reschedule (quote note))

  ;; syntax highlight latex in org files
  (setq org-highlight-latex-and-related '(latex script entities))

  ;; define the number of days to show in the agenda
  (setq org-agenda-span 14
        org-agenda-start-on-weekday nil
        org-agenda-start-day "-3d")

  ;; default duration of events
  (setq org-agenda-default-appointment-duration 60)

  ;; function for below
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)) )

  ;; custom agenda view
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "")
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (air-org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))))))))))

  ;; calendar export
  (setq org-icalendar-alarm-time 45)
  ;; This makes sure to-do items as a category can show up on the calendar
  (setq org-icalendar-include-todo nil)
  ;; dont include the body
  (setq org-icalendar-include-body nil)
  ;; This ensures all org "deadlines" show up, and show up as due dates
  ;; (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
  ;; This ensures "scheduled" org items show up, and show up as start times
  (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
  (setq org-icalendar-categories '(all-tags))
  ;; this makes repeated scheduled tasks NOT show after the deadline is passed
  (setq org-agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline)

  ;; my own function to export to .ics
  (defun reh/export-to-ics ()
    "Routine that dumps Todo.org to Todo.ics in Syncthing"
    (interactive)
    ;(shell-command "rm /home/hewitt/Sync/Org/Todo.ics")
    (with-current-buffer (find-file-noselect "/home/hewitt/Sync/Org/Todo.org")
      (rename-file (org-icalendar-export-to-ics)
                   "/home/hewitt/Sync/Org/Todo.ics" t)
      (message "Exported Todo.org to Todo.ics"))
    )

  ;; Annoying output littered with S
  (defun reh/replaceS ()
    (interactive)
    (shell-command "sed -i -e \'s/SUMMARY:S:/SUMMARY:/g\' /home/hewitt/Sync/Org/Todo.ics")
    )

  (if (system-is-Orthanc)
  ;; ONLY RUN THIS ON THE OFFICE MACHINE -- to avoid conflicted copies of .ics file
      ( progn (message "Machine is Orthanc" )
              (message "Writing Org calendar to ics every 30 minutes" )
              (run-with-timer 60 1800 'reh/export-to-ics)
              (run-with-timer 90 1800 'reh/replaceS) ) )
  ;(if (system-is-Blasius)
  ;    ( progn (message "Machine is Blasius" )
  ;            (message "Not running the .ics generator" ) ) )
#+END_SRC

** Org-babel

Reproducible research aide.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure t
    :init
    (message "Use-package: gnuplot for babel installed") )
  ;; languages I work in via babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t) (emacs-lisp . t) (shell . t) (python . t)))
  ;; stop it asking if I'm sure about evaluation
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Org-Roam

Sets up org-roam as a personal wiki using Deft as an Org search tool.
Org-journal is installed together with org-roam-server at localhost:8080.
I've taken out org-roam-server, I find that I never use it and instead
just search the Roam files via Deft.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :delight "OR"
    :after org
    :init
    (setq org-roam-v2-ack t) ; yes I've migrated from v1 of Roam
    (message "Use-package: Org-roam")
    :custom
    (org-roam-directory "~/Sync/Org/Roam")
    (org-roam-graph-viewer "/usr/bin/eog")
    (org-ellipsis "▾")
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup)
    )

  ; removed
  ;; (use-package org-roam-server
  ;;   :ensure t
  ;;   :defer
  ;;   :after org-roam
  ;;   :init
  ;;   (message "Use-package: Org-roam-server")
  ;;   :config
  ;;   (setq org-roam-server-host "127.0.0.1"
  ;;         org-roam-server-port 8080
  ;;         org-roam-server-authenticate nil
  ;;         org-roam-server-export-inline-images t
  ;;         org-roam-server-serve-files nil
  ;;         org-roam-server-served-file-extensions '("pdf" "doc" "docx" "mp4")
  ;;         org-roam-server-network-poll t
  ;;         org-roam-server-network-arrows nil
  ;;         org-roam-server-network-label-truncate t
  ;;         org-roam-server-network-label-truncate-length 60
  ;;         org-roam-server-network-label-wrap-length 20
  ;;         org-roam-server-mode nil) )

  (use-package org-journal
     :ensure t
     :init
     (message "Use-package: Org-journal")
     :config
     (setq org-journal-dir "~/Sync/Org/Roam/Journal/"
           org-journal-date-format "%A, %d %B %Y"
           org-journal-file-format "%Y_%m_%d"
           org-journal-time-prefix "  - "
           org-journal-time-format nil
           org-journal-file-type 'monthly)  )

#+END_SRC

** Search through the Org directory via Deft

Allows direct searching of my org-roam files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package deft
    :ensure t
    :after org
    :init
    (message "Use-package: Deft")
    :config
    (setq deft-recursive t)
    ;; Org-Roam v2 now stores :properties: on line 1, so below uses the filename in deft list
    (setq deft-use-filename-as-title t)
    (setq deft-default-extension "org")
    (setq deft-directory "~/Sync/Org/Roam")
    )
#+END_SRC


* Elfeed

RSS reader. The feed list can be setq below.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-curl-max-connections 10)
    (setq elfeed-db-directory "~/CURRENT/dot.config/emacs.d/elfeed/")
    (setq elfeed-enclosure-default-dir "~/Downloads/")
    (setq elfeed-search-filter "@1-week-ago +unread")
    (setq elfeed-sort-order 'descending)
    ;(setq elfeed-search-clipboard-type 'CLIPBOARD)
    (setq elfeed-search-title-max-width 100)
    (setq elfeed-search-title-min-width 30)
    (setq elfeed-search-trailing-width 25)
    (setq elfeed-show-truncate-long-urls t)
    (setq elfeed-show-unique-buffers t)
    (setq elfeed-feeds
     '(("https://protesilaos.com/codelog.xml" emacs tech)
       ("https://irreal.org/blog/?feed=rss2" emacs tech)
       ("http://feeds.feedburner.com/XahsEmacsBlog" emacs tech)
       ("http://pragmaticemacs.com/feed/" emacs tech)
       ("http://feeds.bbci.co.uk/news/technology/rss.xml" news tech)
       ("https://www.theverge.com/rss/index.xml" news tech)
       ("https://emacsredux.com/atom.xml" emacs tech)
       ("https://www.phoronix.com/rss.php" tech)
       ("https://www.techradar.com/uk/rss/news/computing" tech)
       ))
    ;; see https://protesilaos.com/dotemacs/
    (defun prot/elfeed-show-eww (&optional link)
      "Browse current `elfeed' entry link in `eww'.
  Only show the readable part once the website loads.  This can
  fail on poorly-designed websites."
      (interactive)
      (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                        elfeed-show-entry
                      (elfeed-search-selected :ignore-region)))
             (link (if link link (elfeed-entry-link entry))))
        (eww link)
        (add-hook 'eww-after-render-hook 'eww-readable nil t))
        ) ;close defun

    :bind
    (("C-c f" . elfeed)
           :map elfeed-search-mode-map
          ("e" . prot/elfeed-show-eww)
          ) )
#+END_SRC
 

* PDF tools

This is a great tool if you have to comment on or otherwise annotate PDFs.
The standard method for adding a text comment is much faster than trying to
scribble a hadnwritten note via other methods.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; pdf tools for organising and annotating PDF
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install) )
#+END_SRC
 

* Email/mu4e

You need the "mu" package and also "mbsync" (also called "isync").
Existing solution was broken by move to Oauth2 in O365. Now I run "davmail"
as an intermediary, with IMAP/SMTP on localhost which seems to run well.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; mu4e is part of the "mu" package and sometimes doesn't get
  ;; found auto-magically. So this points directly to it.
  (add-to-list 'load-path "/home/hewitt/local/share/emacs/site-lisp/mu4e")
  ;; defines mu4e exists, but holds off until needed
  (autoload 'mu4e "mu4e" "Launch mu4e and show the main window" t)

  ;; used for outgoing mail send
  (use-package smtpmail
    :ensure t
    :defer t
    :init
    (message "Use-package: SMTPmail")
    (setq message-send-mail-function 'smtpmail-send-it
      user-mail-address "richard.hewitt@manchester.ac.uk"
      ;smtpmail-default-smtp-server "outgoing.manchester.ac.uk"
      smtpmail-default-smtp-server "localhost"
      smtpmail-local-domain "manchester.ac.uk"
      smtpmail-smtp-server "localhost"
      ;smtpmail-stream-type 'starttls
      smtpmail-smtp-service 1025) )

  ;; 2018 : this stops errors associated with duplicated UIDs -- LEAVE IT HERE!
  (setq mu4e-change-filenames-when-moving t)
  ;; general mu4e config
  (setq mu4e-maildir (expand-file-name "/home/hewitt/CURRENT/mbsyncmail"))
  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/Sent")
  (setq mu4e-trash-folder  "/Deleted Items") ; I don't sync Deleted Items & largely do permanent delete "D" rather than move to trash "d"
  (setq message-signature-file "/home/hewitt/CURRENT/dot.signature")
  (setq mu4e-headers-show-thread nil)
  (setq mu4e-headers-include-related nil)
  (setq mu4e-headers-results-limit 200)
  (setq mu4e-mu-binary "/home/hewitt/local/bin/mu")
  ;; stop mail draft/sent appearing in the recent files list of the dashboard
  (add-to-list 'recentf-exclude "\\mbsyncmail\\")
  ;; how to get mail
  (setq mu4e-get-mail-command "~/local/bin/mbsync Work"
        ;mu4e-html2text-command "w3m -T text/html"
        mu4e-html2text-command "html2markdown --body-width=72" 
        mu4e-update-interval 300
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include t)

  ;; the headers to show 
  ;; in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
      '((:human-date    .  15)    ;; alternatively, use :date
         (:flags         .   6)
         (:from          .  22)
         (:subject       .  nil))  ;; alternatively, use :thread-subject
      )
  (setq mu4e-maildir-shortcuts
        '( ("/INBOX"          . ?i)
           ("/Sent"           . ?s)
           ("/Deleted Items"  . ?t)
           ("/Drafts"         . ?d)) )
  ;; REMOVE BELOW FOR TERMINAL EMACS
  ;; show images
  (setq mu4e-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types) )
  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "richard.hewitt@manchester.ac.uk"
      user-mail-address "richard.hewitt@manchester.ac.uk"
      user-full-name  "Rich Hewitt")
  ;;;; don't save message to Sent Messages, IMAP takes care of this
  ;; 2019: emails are vanishing with below!
  (setq mu4e-sent-messages-behavior 'sent)

  ;; spell check during compose
  (add-hook 'mu4e-compose-mode-hook
    (defun my-do-compose-stuff ()
    "My settings for message composition."
    (set-fill-column 72)
    (flyspell-mode)
    ; turn off autosave, otherwise we end up with multiple versions of sent/draft mail being sync'd
    (auto-save-mode -1) ) )
#+END_SRC


* Shortcut keys

Let's put some general shortcuts into one place for the moment.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; simple prefix key launcher
  (global-set-key (kbd "C-c h l") 'elfeed)
  (global-set-key (kbd "C-c h m") 'mu4e)
  (global-set-key (kbd "C-c h r") 'org-roam)
  (global-set-key (kbd "C-c h a") 'org-agenda)
  ;; C-c e : edit the init.el configuration file
  (defun config-visit ()
    (interactive)
    (find-file "~/CURRENT/dot.config/emacs.d/config.org") )
  (global-set-key (kbd "C-c e") 'config-visit)
  ;; C-c r : reload the configuration file
  (defun config-reload ()
    (interactive)
    (load-file (expand-file-name "~/.emacs.d/init.el")) )
  (global-set-key (kbd "C-c r") 'config-reload)
  #+END_SRC

